/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

/**
 *
 * @author
                Amartya Kumar Roy (FrontEnd)
                 Ahren Pradhan (BackEnd)
 */
import java.io.*;
import java.net.*;
public class MainScreen extends javax.swing.JFrame {
    static ServerTCP server;
    static Thread t;
    static ClientTCP client;
    String IPAddress;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    public void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mesage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        send = new javax.swing.JButton();
        jScrollBar1 = new javax.swing.JScrollBar();
        ipTextField = new javax.swing.JTextField();
        connect = new javax.swing.JButton();
        receivingPort = new javax.swing.JTextField();
        targetPort = new javax.swing.JTextField();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mesage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesageActionPerformed(evt);
            }
        });

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        send.setText("send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        connect.setText("connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        receivingPort.setText("1802");
        receivingPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivingPortActionPerformed(evt);
            }
        });

        targetPort.setText("1234");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mesage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(connect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(receivingPort, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connect, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(receivingPort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetPort, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send)
                    .addComponent(mesage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        //after all the elements are created ,we initialize the serverTCP class object

        server = new ServerTCP(textarea);
        t = new Thread(server);
        t.start();

        //the server Thread is created and ready to append messages in the text area

        pack();
    }// </editor-fold>

    public void mesageActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.out.print("f**********************");
    }

    public void receivingPortActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.out.print("&&&&&&&&&&&&&&&&&&&&jahvscj");
    }

    public void connectActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        IPAddress = ipTextField.getText();
        client = new ClientTCP(IPAddress,mesage,textarea);

    }
    public void sendActionPerformed(java.awt.event.ActionEvent evt) {
            System.out.print("fxdfghhkjhgxdfbsahknvsadb,gsjfaglcgsh");
        textarea.append("\n"+"mesageActionPerformed");
        String mm;//message to be sent
        mm = mesage.getText();
        client.sendMessage(mm);

    }

    /**

     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify*
    public javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JButton connect;
    public javax.swing.JTextField ipTextField;
    public javax.swing.JScrollBar jScrollBar1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField mesage;
    public javax.swing.JTextField receivingPort;
    public javax.swing.JButton send;
    public javax.swing.JTextField targetPort;
    public javax.swing.JTextArea textarea;

    // End of variables declaration
}
class ServerTCP extends javax.swing.JFrame implements Runnable
{
        static Thread t;
        Socket c;
//        ClientTCP client;
        String str;
        public javax.swing.JTextArea textarea;
        DataInputStream dis;
        ServerSocket s;
        ServerTCP(javax.swing.JTextArea textarea)
        {
                try{
                        s = new ServerSocket(5000);
                        this.textarea = textarea;
                }catch(Exception e){
                        System.out.println("Exception in SERVERTCP constructor\t"+e);
                }
        }
        public void run()
        {
                try{
                        while(true)
                        {
                                try{
                                        c = s.accept();
                                        dis = new DataInputStream(c.getInputStream());
                                        str=null;
                                        if( (str=dis.readUTF()) !=null)
                                        {
                        //                                textarea.setForeground(Color.green);
                                                textarea.append("\nRecieved : "+str);
                                        }
                                        dis.close();
                                        c.close();
                                }catch(Exception f){
                                        System.out.println(f);
                                }
                        }
                }catch(Exception e){
                        System.out.println(e);
                }
        }
};
class ClientTCP extends javax.swing.JFrame
{
        String IPAddress;
        public javax.swing.JTextArea textarea;
        public javax.swing.JTextField message;
        ClientTCP(String IPAddress, javax.swing.JTextField message, javax.swing.JTextArea textarea)
        {
                this.IPAddress = IPAddress;
                this.textarea = textarea;
                this.message = message;
                textarea.append("\n"+"Constructor executed");
        }
        public void sendMessage(String str)
        {
                try{
                        Socket s;
                        textarea.append("\n"+"Inside send message");
                        s = new Socket(IPAddress,5000);
                        textarea.append("\n"+"Successfully connected");
                        DataOutputStream dos = new DataOutputStream(s.getOutputStream());
                        dos.writeUTF(str);
                        message.setText(null);
                        textarea.append("\nSent : "+str);
                        dos.close();    // data output stream terminated
                        s.close();      // Socket connection terminated
                }catch(Exception e){
                        System.out.println(e);
                }

        }
};
